<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                    http://www.springframework.org/schema/security 
                    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <beans:import resource="root-context.xml"/>

    <global-method-security secured-annotations="enabled"
                            jsr250-annotations="enabled"
                            pre-post-annotations="enabled"
                            proxy-target-class="true"/>

    <http auto-config="true" use-expressions="true" authentication-manager-ref="authenticationManager">

        <!--Protect operations over com.intetics.bean.EntitySchema-->
        <intercept-url pattern="/entity/create" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/edit/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/save" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/delete/**" access="hasAnyRole('Admin','ReadWrite')" />

        <!--Protect operations over com.intetics.bean.EntityInstance-->
        <intercept-url pattern="/home/entity/**/instance/create" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/home/entity/**/instance/add" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/home/entity/**/instance/edit/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/home/entity/**/instance/update/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/home/entity/**/instance/delete/**" access="hasAnyRole('Admin','ReadWrite')" />

        <!--Protect operations over com.intetics.bean.Field-->
        <intercept-url pattern="/entity/**/field/create/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/**/field/add/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/**/field/edit/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/**/field/change/**" access="hasAnyRole('Admin','ReadWrite')" />
        <intercept-url pattern="/entity/**/field/delete/**" access="hasAnyRole('Admin','ReadWrite')" />

        <!--Protect operations over com.intetics.bean.User-->
        <intercept-url pattern="/manage_users/edit/**" access="hasRole('Admin')" />
        <intercept-url pattern="/manage_users/save" access="hasRole('Admin')" />
        <intercept-url pattern="/manage_users/create" access="hasRole('Admin')" />
        <intercept-url pattern="/manage_users/add" access="hasRole('Admin')" />
        <intercept-url pattern="/manage_users/delete/**" access="hasRole('Admin')" />

        <!--Base protection-->
        <intercept-url pattern="/entity/**" access="isAuthenticated()" />
        <intercept-url pattern="/home/**" access="isAuthenticated()" />
        <intercept-url pattern="/manage_users/**" access="isAuthenticated()" />
        <intercept-url pattern="/registration/company/**" access="hasRole('Admin')" />
        <intercept-url pattern="/registration/password/**" access="hasAnyRole('ReadOnly','ReadWrite')" />

        <form-login default-target-url="/home/entity/list"
                    login-page="/"
                    authentication-failure-url="/?login_error=1"/>

        <logout logout-success-url="/" invalidate-session="true"/>

    </http>

    <beans:bean id="companyFilter" class="com.intetics.filter.UserCompanyOrPasswordExistFilter"/>

    <authentication-manager id="authenticationManager">
        <authentication-provider>
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query="select email, password, confirmed from users where email=?"
                               authorities-by-username-query="SELECT email, name FROM users, role where email=? and users.role_id=role.role_id;"/>
        </authentication-provider>
    </authentication-manager>

</beans:beans>